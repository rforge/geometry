
R version 2.14.0 (2011-10-31)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(geometry)
Loading required package: magic
Loading required package: abind
> x <- c(-1, -1, 1)
> y <- c(-1, 1, -1)
> tri <- matrix(c(1, 2, 3), 1, 3)
> # Should be in triangle #1
> tsearch(x, y, tri, -1, -1)
[1] 1
> # Should be in triangle #1
> tsearch(x, y, tri,  1, -1)
[1] 1
> # Should be in triangle #1
> tsearch(x, y, tri, -1, 1)
[1] 1
> # Should be in triangle #1
> tsearch(x, y, tri, -1/3, -1/3)
[1] 1
> # Should be outside triangle #1, so should return NA
> tsearch(x, y, tri, 1, 1)
[1] NA
> 
> ## Create degenerate simplex - thanks to Bill Denney for example
> ps <- as.matrix(rbind(data.frame(a=0, b=0, d=0),
+                       merge(merge(data.frame(a=c(-1, 1)),
+                                   data.frame(b=c(-1, 1))),
+                             data.frame(d=c(-1, 1)))))
> 
> ## The Qt option leads to the degnerate simplices
> ts <- delaunayn(ps, "Qt")
> ## tsearchn should return a "degnerate simplex" error here
> tsearchn(ps, ts, cbind(1, 2, 4))
$idx
[1] NA

$p
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA

Warning message:
In tsearchn(ps, ts, cbind(1, 2, 4)) : Degenerate simplices: 1, 4, 7
> ## Encasing this in a try() statement shouldn't make a difference
> try(tsearchn(ps, ts, cbind(1, 2, 4)))
$idx
[1] NA

$p
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA

Warning message:
In tsearchn(ps, ts, cbind(1, 2, 4)) : Degenerate simplices: 1, 4, 7
> 
> ## The QJ option should lead to no degnerate simplex
> ts <- delaunayn(ps, "QJ")
> ## tsearchn shouldn't return a "degnerate simplex" error. FIXME: But
> ## it does.
> tsearchn(ps, ts, cbind(1, 2, 4))
$idx
[1] NA

$p
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA

Warning message:
In tsearchn(ps, ts, cbind(1, 2, 4)) : Degenerate simplices: 10
> ## Encasing this in a try() statement shouldn't make a difference
> try(tsearchn(ps, ts, cbind(1, 2, 4)))
$idx
[1] NA

$p
     [,1] [,2] [,3] [,4]
[1,]   NA   NA   NA   NA

Warning message:
In tsearchn(ps, ts, cbind(1, 2, 4)) : Degenerate simplices: 10
> 
